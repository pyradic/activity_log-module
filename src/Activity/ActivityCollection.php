<?php namespace Pyro\ActivityLogModule\Activity;

use Anomaly\Streams\Platform\Entry\EntryCollection;

/**
 * 
 *
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] filterBy($key, $value)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] whereLike($key, $values)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] load($relations)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] loadCount($relations)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] loadMissing($relations)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] loadMorph($relation, $relations)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] contains($key, $operator = NULL, $value = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] merge($items)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] map(callable $callback)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] diff($items)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] intersect($items)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] unique($key = NULL, $strict = false)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] only($keys)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] except($keys)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] makeHidden($attributes)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] makeVisible($attributes)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] getDictionary($items = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] zip($items)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] collapse()
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] flatten($depth = INF)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] flip()
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] times($number, callable $callback = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] all()
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] containsStrict($key, $value = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] crossJoin($lists)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] diffUsing($items, callable $callback)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] diffAssoc($items)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] diffAssocUsing($items, callable $callback)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] diffKeys($items)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] diffKeysUsing($items, callable $callback)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] duplicates($callback = NULL, $strict = false)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] duplicatesStrict($callback = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] each(callable $callback)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] eachSpread(callable $callback)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] every($key, $operator = NULL, $value = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] filter(callable $callback = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] when($value, callable $callback, callable $default = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] whenEmpty(callable $callback, callable $default = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] whenNotEmpty(callable $callback, callable $default = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] unless($value, callable $callback, callable $default = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] unlessEmpty(callable $callback, callable $default = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] unlessNotEmpty(callable $callback, callable $default = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] where($key, $operator = NULL, $value = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] whereStrict($key, $value)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] whereIn($key, $values, $strict = false)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] whereInStrict($key, $values)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] whereBetween($key, $values)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] whereNotBetween($key, $values)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] whereNotIn($key, $values, $strict = false)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] whereNotInStrict($key, $values)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] whereInstanceOf($type)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] forget($keys)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] groupBy($groupBy, $preserveKeys = false)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] keyBy($keyBy)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] intersectByKeys($items)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] join($glue, $finalGlue = '')
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] mapWithKeys(callable $callback)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] flatMap(callable $callback)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] mapInto($class)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] mergeRecursive($items)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] combine($values)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] union($items)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] prepend($value, $key = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] push($value)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] concat($source)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] put($key, $value)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] random($number = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] reduce(callable $callback, $initial = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] reject($callback = true)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] replace($items)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] replaceRecursive($items)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] reverse()
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] search($value, $strict = false)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] shuffle($seed = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] chunk($size)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] sort(callable $callback = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] sortBy($callback, $options = SORT_REGULAR, $descending = false)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] sortByDesc($callback, $options = SORT_REGULAR)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] sortKeys($options = SORT_REGULAR, $descending = false)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] sortKeysDesc($options = SORT_REGULAR)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] sum($callback = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] transform(callable $callback)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] uniqueStrict($key = NULL)
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] values()
 * @method \Pyro\ActivityLogModule\Activity\ActivityCollection|\Pyro\ActivityLogModule\Activity\Contract\ActivityInterface[] add($item)
 * @method \Pyro\ActivityLogModule\Activity\Contract\ActivityInterface findBy($key, $value)
 * @method \Pyro\ActivityLogModule\Activity\Contract\ActivityInterface find($key, $default = NULL)
 * @method \Pyro\ActivityLogModule\Activity\Contract\ActivityInterface get($key, $default = NULL)
 * @method \Pyro\ActivityLogModule\Activity\Contract\ActivityInterface firstWhere($key, $operator = NULL, $value = NULL)
 * @method \Pyro\ActivityLogModule\Activity\Contract\ActivityInterface first(callable $callback = NULL, $default = NULL)
 * @method \Pyro\ActivityLogModule\Activity\Contract\ActivityInterface last(callable $callback = NULL, $default = NULL)
 * @method \Pyro\ActivityLogModule\Activity\Contract\ActivityInterface pull($key, $default = NULL)
 * @method \Pyro\ActivityLogModule\Activity\Contract\ActivityInterface shift()
 * @method \Pyro\ActivityLogModule\Activity\Contract\ActivityInterface pop()
 */
class ActivityCollection extends EntryCollection
{

}
